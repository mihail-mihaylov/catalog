{"version":3,"sources":["parametric.js"],"names":[],"mappingsfile":"parametric.js","sourcesContent":["var mapper = undefined;\nwindow.onload = function () {\n    var trackedObjectsList = $('#tracked_objects_parametric');\n    var trackedObjectsParameters = $('#tracked_objects_parameters');\n\n    trackedObjectsList.select2({\n        width: \"100%\",\n        language: {\n           \"noResults\": function(){\n               return translations.no_data;\n           }\n       }\n    });\n\n    trackedObjectsParameters.select2({\n        width: \"100%\",\n        language: {\n           \"noResults\": function(){\n               return translations.no_data;\n           }\n       }\n    });\n\n    var toggleSpinner = function() {\n        var spinner = $('#spiner-inputs');\n        if (spinner.hasClass('hidden')) {\n            spinner.removeClass('hidden');\n        } else {\n            spinner.addClass('hidden');\n        }\n    };\n\n    trackedObjectsList.on('change', function (event) {\n        //toggleSpinner();\n        requester.get($(this).find(':selected').data('get')).then(\n            function (success) {\n                //toggleSpinner();\n                $(trackedObjectsParameters).select2(\"destroy\");\n                trackedObjectsParameters.find('option').remove();\n                $(trackedObjectsParameters).select2({data: success.parameters});\n            },\n            function (fail) {\n                //toggleSpinner();\n            }\n        )\n    });\n\n    trackedObjectsList.select2('val', $('#tracked_objects_parametric option:eq(0)').val());\n        $('#end_date').datepicker({\n            todayBtn: 'linked',\n            calendarWeeks: true,\n            autoclose: true,\n            language: $('.data-locale').data('locale'),\n            todayHighlight: true,\n            format: 'yyyy-mm-dd'\n        });\n\n        var chartContainer = $('<div></div>');\n\n       var selector = $('#morris-inputs-chart');\n    /**\n     * Parse and show errors\n     */\n    var parseErrorsToForm = function (errors) {\n        // Remove error class from input fields\n        // $('.form-control').removeClass('error');\n\n        $('.validation_errors').html('');\n\n        // Create alert with error messages\n        var div = $(document.createElement('div'));\n        div.addClass('alert alert-danger alert-dismissable col-md-12');\n        div.html('<button aria-hidden=\"true\" data-dismiss=\"alert\" class=\"close\" type=\"button\">Ã—</button>');\n\n        // Loop errors\n        $.each(errors.responseJSON, function (key, value) {\n            // Replace names of the fields which are named with array format (.1 with [1]). Example: first_name.1 to first_name[1]\n            if (key.indexOf('.') !== -1) {\n                key = key.split('.').join('][');\n                key = key.replace(/\\./g, '][');\n                key = key.replace(']', '');\n                key += ']';\n            }\n\n            // Add error class to fields with mistake\n            $(\"input[name='\" + key + \"'], select[name='\" + key + \"'], textarea[name='\" + key + \"']\").addClass('error');\n            // Add error to alert\n            div.append('<div class=\"text-left\">' + value + '</div>');\n        });\n\n        $('.validation_errors').append(div);\n    }\n\n    $(document).delegate('#get_parametric_report', 'click', function (event)\n    {\n        event.preventDefault();\n        var data = $('#end_date, #tracked_objects_parameters, #periodInput, #hiddenLastDate').serialize();\n\n        requester.post($(this).data('post'), null, data).then(function (success)\n        {\n            // $('.form-control').removeClass('error');\n            $('.graphs').html('');\n            $('.validation_errors').html('');\n\n            if(success.data != null)\n            {\n                $.each(success.data, function (inputId, events)\n                {\n                    var points = [];\n                    var div_id = 'input_'+inputId;\n                    var temp_translations = [];\n                    $('.results').removeClass('hidden');\n\n                    if (events[0].device_input_event_id != null)\n                    {\n                        $.each(events, function (n, event)\n                        {\n                            if (event.type == 'digital' && !(parseInt(event.input_event_value) in temp_translations))\n                            {\n                                var key = parseInt(event.input_event_value);\n                                temp_translations[key] = (event.graphValue);\n                            }\n\n                            points.push([new Date(moment(event.gps_utc_time).format(\"YYYY/MM/DD HH:mm:ss\")), event.input_event_value, n]);\n                        });\n\n                        // Append div for the current graph\n                        $('.graphs').append('<div id=\"' + div_id + '\"></div><br/><br/><br/>');\n\n                        var g = new Dygraph(document.getElementById(div_id),\n                        points,\n                        {\n                            title: events[0].name + (events[0].measurement_unit ? ' (' + events[0].measurement_unit + ')' : ''),\n                            visibility: [true, false],\n                            axes: {\n                                x: {\n                                    axisLabelFormatter: function(x) {\n                                        return x.getFullYear() + '.' +\n                                            (x.getMonth() + 1 < 10 ? '0' : '') + (x.getMonth() + 1)  + '.' +\n                                            (x.getDate() < 10 ? '0' : '') + x.getDate() + ' ' +\n                                            (x.getHours() < 10 ? '0' : '') + x.getHours() + ':' +\n                                            (x.getMinutes() < 10 ? '0' : '') + x.getMinutes() + ':' +\n                                            (x.getSeconds() < 10 ? '0' : '') + x.getSeconds();\n                                    }\n                                },\n                                y: {\n                                    axisLabelFormatter: function (y)\n                                    {\n                                        if(events[0].type == 'digital')\n                                        {\n                                            return temp_translations[parseInt(y)];\n                                        }\n                                        return parseFloat(y).toFixed(1);\n                                    },\n                                    valueFormatter: function (y)\n                                    {\n                                        if(events[0].type == 'digital')\n                                        {\n                                            return temp_translations[parseInt(y)];\n                                        }\n                                        return parseFloat(y).toFixed(1);\n                                    }\n                                }\n                            },\n                            axisLabelWidth: 72,\n                            labels: [ 'Date', 'Value', 'ID' ],\n                            pointClickCallback: function(event, p)\n                            {\n                                displayOnMap(this.getValue(p.idx, 2), events);\n                            }\n                        });\n\n                        g.resize();\n\n                    } else {\n                        $('.graphs').append(\"<b>\" + events[0].name + \"</b> - \" + translations.no_data + \"<br /><br />\");\n                    }\n\n                    // Scroll to the results\n                    window.scrollTo(0, 500);\n                });\n            }\n        },\n        function (fail) {\n            parseErrorsToForm(fail);\n        });\n    });\n\n    $(document).delegate('#clear_parametric_diagrams', 'click', function (event)\n    {\n        $('.graphs').html('');\n    });\n};\n\nfunction displayOnMap(id, events)\n{\n    for(var key in events)\n    {\n        if(id == key)\n        {\n            // Create map container\n            if ($(\"#parametric_point_map\").length === 0)\n            {\n                var div = document.createElement('div');\n                div.id = 'parametric_point_map';\n                div.style.width = \"100%\";\n                div.style.height = \"500px\";\n            }\n\n            // Show modal\n            $('#baseModal').modal('show');\n\n            if (mapper != undefined)\n            {\n                mapper.clearMarkers();\n                mapper.map.remove();\n            }\n\n            // Prepare modal\n            $('#baseModalTitle').html(translations.view_location);\n            $('#baseModal .modal-body .modal-body-content').append(div);\n            mapper = app.mapper.load('parametric_point_map', false);\n            $(\".modal-body-loading\").hide();\n\n            // Create marker and add it to map\n            var gps_event = events[key];\n            var latLngPoint = [parseFloat(gps_event.latitude), parseFloat(gps_event.longitude)];\n            var marker = L.marker(latLngPoint);\n            assignIcon(marker, gps_event.device_status, gps_event.azimuth);\n            marker.addTo(mapper.map);\n\n            // Fit bounds\n            setTimeout(function ()\n            {\n                mapper.map.fitBounds(\n                    [latLngPoint],\n                    {padding: [50, 50]}\n                );\n            }, 100);\n        }\n    }\n\n\n}\n"],"sourceRoot":"/source/"}