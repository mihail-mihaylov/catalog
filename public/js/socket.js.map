{"version":3,"sources":["socket.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"socket.js","sourcesContent":["var socketIoApp = require('express')();\nvar http = require('http').Server(socketIoApp);\nvar io = require('socket.io')(http);\nvar Redis = require('ioredis');\nvar redis = new Redis();\n\nredis.subscribe('enacted-channel', function(err, count) {});\n\nio.sockets.on('connection', function(socket) {\n    socket.on('room', function(room) {\n        socket.join(room);\n        console.log(room);\n    });\n});\n\nredis.on('message', function(channel, message) {\n    console.log('Message Recieved: ' + message);\n    message = JSON.parse(message);\n\n    // Loop all users and send message to their room\n    for (var x in message.data.information.users_ids) {\n        // Configure room name\n        var room = channel + '-' + message.data.information.users_ids[x];\n        // Send message to the room\n        io.sockets.in(room).emit('message', {\n                type: message.data.information.type,\n                date_time: message.data.information.date_time\n            });\n    }\n});\n\nhttp.listen(3000, function(){\n    console.log('Listening on Port 3000');\n});\n\n"],"sourceRoot":"/source/"}