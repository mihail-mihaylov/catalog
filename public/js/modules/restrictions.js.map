{"version":3,"sources":["main.js"],"names":[],"mappingsfile":"restrictions.js","sourcesContent":["var modal = $('#baseModal');\nvar opened_map = 'list_map';\n\nvar requester = undefined;\nmapper = undefined;\n\n$(function (){\n    initializeRequester();\n    initializeMapper();\n    mapper.map.on('draw:deleted', function(event)\n    {\n        $('.delete_area').prop('checked', true);\n    });\n\n    mapper.map.on('draw:created', function(event)\n    {\n        $('.delete_area').prop('checked', false);\n    });\n});\n\nfunction initializeMapper() {\n    if (mapper === undefined) {\n        mapper = app.mapper.load('map', false);\n        L.control.attribution();\n    }\n\n    return mapper;\n}\n\nfunction initializeRequester() {\n    if (requester === undefined) {\n        requester = app.requester.load();\n    }\n}\n\nfunction getCoordinates(areaPoints)\n{\n    var coordinates = [];\n\n    if (areaPoints.length == 1) {\n        var coordinates = [\n            (areaPoints.children('.area_point_latitude').data(\"latitude\")),\n            (areaPoints.children('.area_point_longitude').data(\"longitude\"))\n        ];\n\n        return coordinates;\n    }\n\n    $.each(areaPoints, function(n, point) {\n        var latLng = [\n            ($(this).children('.area_point_latitude').data(\"latitude\")),\n            ($(this).children('.area_point_longitude').data(\"longitude\"))\n        ];\n\n        coordinates.push(latLng);\n    });\n\n    return coordinates;\n}\n\nfunction refreshAreas() {\n    mapper.featureGroup.clearLayers();\n}\n\nfunction moveMap(opened_map)\n{\n    if(opened_map == 'create_map')\n    {\n        mapper.toggleDrawControl(true);\n    }\n\n    if(opened_map == 'edit_map')\n    {\n        mapper.toggleDrawControl(true);\n    }\n\n    $('#'+opened_map).append($('#map'));\n    mapper.clearAreas();\n\n    $(document).trigger('map-container-resize', mapper.map);\n}\n\n$(document).delegate('.restriction_store_button', 'click', function (e) {\n    e.preventDefault();\n    toggleFormSpinner();\n    var formAction = $(this).attr('action');\n    var areaData = mapper.getAreaFormData();\n    appendAreaFormData(areaData, $(this));\n    $('.restriction_store_form').submit();\n});\n\n$(document).on('modal_form_loaded', function (e)\n{\n    setTimeout(function()\n    {\n        if($('#edit_map').length == 1)\n        {\n            opened_map = 'edit_map';\n            moveMap(opened_map);\n        }\n\n        if($('.area_data').html() != undefined  && $('.area_data').html().trim() != \"\")\n        {\n            var areaPoints = $('.area_points');\n            var coordinates = [];\n            var radius = parseFloat($('.area_radius').data('radius'));\n            var areaType = $('.area_type').data('areatype');\n\n            if(areaType == 'rectangle') {areaType = 'polygon'}\n\n            areaType = ucfirst(areaType);\n            method = 'draw' + areaType;\n\n            $.each(areaPoints, function (n, elem) {\n                coordinates.push(L.latLng([parseFloat($(elem).data('latitude')), parseFloat($(elem).data('longitude'))]));\n            });\n\n            mapper[method](coordinates, radius);\n\n            setTimeout(function (){\n                    mapper.map.fitBounds(\n                        mapper.featureGroup.getBounds(),\n                        {padding: [50, 50]}\n                    );\n                }, 100);\n        }\n\n        if($('#create_map').length == 1)\n        {\n            opened_map = 'create_map';\n            moveMap(opened_map);\n        }\n\n        // mapper.displayFitAreas();\n    }, 300); // 300 because the fadeout effect of html dynamically loaded\n});\n\n$(document).delegate('.restriction_update_button', 'click', function (ev) {\n    ev.preventDefault();\n    toggleFormSpinner();\n    var formAction = $(this).attr('action');\n\n    mapper.processAreaFormData(mapper.featureGroup);\n    var areaData = mapper.getAreaFormData();\n    // if($('.area_point').val() != undefined){\n        appendAreaFormData(areaData, $(this));\n    // }\n    // $( \"button:last\" ).click(function() {\n    //   $( \"button:first\" ).trigger( \"click\" );\n    //   update( $( \"span:last\" ) );\n    // });\n     $('.restriction_update_form').submit();\n});\n\nmodal.on('hidden.bs.modal', function(e) {\n    $('#list_map').append($('#' + opened_map).find('#map'));\n\n    $(document).trigger('map-container-resize', mapper.map);\n\n    if(opened_map != 'violation_map')\n    {\n        mapper.toggleDrawControl(false);\n    }\n\n    if (mapper.featureGroup.getLayers().length > 0) {\n        mapper.featureGroup.eachLayer(function(layer) {\n            mapper.map.removeLayer(layer);\n        })\n    }\n});\n\nfunction appendAreaFormData(data, container)\n{\n    container.find('input.hidden.area_data').remove();\n\n    if (data.length) {\n        var areaType = 'polygon';\n        $.each(data, function(n, area) {\n\n            if (area.radius !== undefined) {\n                var radiusInput = $(document.createElement(\"input\"));\n                var centerLatInput = $(document.createElement(\"input\"));\n                var centerLngInput = $(document.createElement(\"input\"));\n\n                radiusInput.attr('class', 'hidden area_data');\n                radiusInput.attr('name', 'radius');\n                radiusInput.attr('value', area.radius);\n\n                centerLatInput.attr('class', 'hidden area_points area_data');\n                centerLatInput.attr('name', 'area_point[0][lat]');\n                centerLatInput.attr('value', area.lat);\n\n                centerLngInput.attr('class', 'hidden area_points area_data');\n                centerLngInput.attr('name', 'area_point[0][lng]');\n                centerLngInput.attr('value', area.lng);\n\n                container.append(radiusInput);\n                container.append(centerLatInput);\n                container.append(centerLngInput);\n\n                areaType = 'circle';\n            } else {\n                $.each(area, function(n, latLngObj) {\n                    var latInput= $(document.createElement(\"input\"));\n                    var lngInput= $(document.createElement(\"input\"));\n\n                    latInput.attr('class', 'hidden area_points area_data');\n                    latInput.attr('name', 'area_point[' + n + '][lat]');\n                    latInput.attr('value', latLngObj.lat);\n\n                    lngInput.attr('class', 'hidden area_points area_data');\n                    lngInput.attr('name', 'area_point[' + n + '][lng]');\n                    lngInput.attr('value', latLngObj.lng);\n\n                    container.append(latInput);\n                    container.append(lngInput);\n                    // console.log('1');\n                });\n            }\n\n\n        });\n\n        var areaTypeInput = $(document.createElement(\"input\"));\n        areaTypeInput.attr('class', 'hidden area_data');\n        areaTypeInput.attr('name', 'area_type');\n        areaTypeInput.attr('value', areaType);\n        container.append(areaTypeInput);\n    }\n}\n\nfunction toggleFormSpinner()\n{\n    $('#sk-restriction-spinner').toggle();\n}\n\nfunction parseErrors(errors)\n{\n    $('.restriction-errors').html('');\n\n    $.each(errors, function(n, error) {\n        var errCont = $(document.createElement(\"h3\"));\n        // errCont.attr('class', 'label label-warning');//\n        errCont.html(error[0]);\n        $('.restriction-errors').append(errCont);\n    });\n}\n\nfunction displayExistingAreaLimit()\n{\n    var areaDataContainer = $('.area_data');\n    var restrictionAreaPoints = $('.area_points');\n    if (restrictionAreaPoints.length) {\n        var radius = areaDataContainer.find('.area_radius').data('radius');\n        var areaType = areaDataContainer.find('.area_type').data('areatype');\n        if (radius != 0) {\n            var newLayer = L.circle([parseFloat(restrictionAreaPoints.first().data('latitude')), parseFloat(restrictionAreaPoints.first().data('longitude'))], parseFloat(radius));\n        } else {\n            var obj = [];\n            $.each(restrictionAreaPoints, function(n, point) {\n                // var polygonPoint = L.latLng(42.7234017, 42.7234017);\n\n                var polygonPoint = L.latLng($(point).data('latitude'), $(point).data('longitude'));\n                obj[n] = polygonPoint;\n            });\n            var newLayer = L.polygon(obj);\n        }\n        mapper.displayArea(newLayer);\n        mapper.map.fitBounds(mapper.featureGroup.getBounds());\n    }\n}\n\nvar drawTrackedObjectRoute = function (data) {\n    var routeLatLngs = [];\n    $.each(data.trackedObjectPositions, function(n, position) {\n        var position = L.latLng(parseFloat(position.latitude), parseFloat(position.longitude));\n        var marker = L.marker(position)\n        routeLatLngs.push(position);\n\n    });\n\n    var route = mapper.drawPolyline(routeLatLngs, {color:'red'});\n    mapper.map.fitBounds(route.getBounds());\n};\n\nvar drawSpeedViolation = function (data) {\n    $.each(data.trackedObjectPositions, function(n, elem) {\n        var position = L.latLng(parseFloat(elem.latitude), parseFloat(elem.longitude));\n        var marker = L.marker(position, {title:'Позволена скорост: ' + data.speed +'<br>' +\n            $('#trans_speed').data('translation') + elem.speed}).addTo(mapper.map);\n\n        mapper.markers.push(marker);\n    });\n\n};\n\nvar drawAreaViolation = function (data) {\n    var coordinates = [];\n    $.each(data.areaPoints, function(n, point) {\n        var coordinate = [point.latitude, point.longitude];\n        coordinates.push(coordinate);\n    });\n\n    if (data.area.radius == 0) {\n        mapper.drawPolygon(coordinates);\n    } else {\n        mapper.drawCircle(coordinates[0], data.area.radius)\n    }\n\n    mapper.fitFeatureGroupBounds();\n}\n\n/**\n * Updating violations table when a restriction is deleted/restored\n * @author Mihail Mihaylov <mmihaylov@neterra.net>\n * @copyright 2016-05-04\n */\n$(document).delegate('button[data-delete]', 'click', function ()\n{\n    // On data delete\n    var button = $(this);\n    var table = button.data('update-table');\n    var restriction_id = button.data('id');\n\n    // Delete row\n    $('#'+table).dataTable().fnDeleteRow('.restriction-'+restriction_id);\n\n});\n\n$(document).delegate('button[data-update]', 'click', function ()\n{\n    // On data update\n    var button = $(this);\n    var table = button.data('update-table');\n    var action = button.data('action');\n    var restriction_id = button.data('id');\n\n    requester.get('violations/getViolationsByRestriction/'+restriction_id)\n    .then(function (data)\n    {\n        var violations = jQuery.parseJSON( data.violations );\n        var table_object = $('#'+table).dataTable();\n\n        $.each(violations, function(index, violation)\n        {\n            var new_row = table_object.fnAddData([\n                null,\n                violation.device.tracked_object.identification_number,\n                ((violation.is_speed_violated) ? translations.by_speed : '')+\"<br/>\"+((violation.is_area_violated) ? translations.by_area : ''),\n                toDate(violation.start_time.date, 'YYYY-MM-DD HH:mm:ss'),\n                toDate(violation.end_time.date, 'YYYY-MM-DD HH:mm:ss'),\n                '<button type=\"button\" class=\"btn btn-xs btn-info\" data-title=\"'+translations.view_violation+'\" data-id=\"'+violation.id+'\" data-action=\"'+window.location.protocol + '//' + location.hostname + '/violations/'+violation.id+'\" data-get><i class=\"fa fa-map-marker\"></i> '+translations.view_on_map+'</button>'\n            ]);\n            var last_added_row = table_object.fnSettings().aoData[ new_row[0] ].nTr;\n            last_added_row.className = 'restriction-'+violation.limit_id;\n        });\n    },\n    function (error) {\n        console.log(error);\n    });\n\n});\n\nfunction  toDate(date, format)\n{\n    var localTime  = moment(date).toDate();\n    localTime = moment(localTime).format(format);\n    return localTime;\n}\n"],"sourceRoot":"/source/"}