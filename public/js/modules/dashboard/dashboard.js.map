{"version":3,"sources":["dashboard.js"],"names":[],"mappingsfile":"dashboard.js","sourcesContent":["var app = app || {};\nvar mapper = undefined;\nvar bounds, markers = [], tempMarkers = [], markergroup, followmarker = false, popup, popupcontent, firstiteration=1;\nvar trackedObjectsTable = $('#trackedObjectsTable').dataTable({\n    \"sDom\": 'ft<\"row\"<\"col-md-5\"l><\"col-md-7\"p>>',\n    \"info\": false,\n    \"paging\": true,\n    \"aaSorting\": [],\n    \"responsive\" : {\n        \"details\": {\n            \"type\": 'column'\n        }\n    },\n    \"columnDefs\": [\n        {\n            \"className\": 'control',\n            \"orderable\": false,\n            \"targets\":   0\n        },\n        { \"responsivePriority\": 1, \"targets\": 1 },\n        { \"responsivePriority\": 2, \"targets\": 4 }\n    ],\n    \"language\":\n        {\n            \"search\": translations.search,\n            \"searchPlaceholder\":translations.searchPlaceholder,\n            \"lengthMenu\": translations.lengthMenu,\n            \"zeroRecords\": translations.zeroRecords,\n            \"info\": translations.info,\n            \"infoEmpty\": translations.infoEmpty,\n            \"infoFiltered\": translations.infoFiltered,\n            \"paginate\": {\n              \"previous\": translations.previous,\n              \"next\": translations.next\n            }\n        }\n});\nvar trackedObjectsTableApi = trackedObjectsTable.api();\n\n\n$(\"#dashboard_tracked_objects_list .dataTables_filter\").appendTo($(\".dashboard_tracked_objects_search\"));\n\n// Locations refresh rate (milliseconds)\nvar locationsrefreshrate = 8000;  // 8s\nvar statisticsrefreshrate = 30000; // 30s\n\n\n$(document).ready(function() {\n\n    mapper = app.mapper.load('map', false);\n    mapper.toggleFullscreenControl(true);\n    mapper.toggleMeasureControl(true);\n\n    popup = new L.Popup({\n        offset: new L.Point(-5, -30),\n        'maxWidth': '350',\n        'className' : 'custom-popup'\n    });\n\n    /*\n     * Initial data load\n     */\n    bounds = new L.LatLngBounds();\n\n    reloadLocations(1);\n    // reloadStatistics(1);\n\n    // When we click somewhere on the map\n    mapper.map.on('click', function(){\n\n       // Stop following a marker\n       followmarker = false;\n\n       // Close the popup\n       // mapper.map.closePopup(popup);\n    });\n\n    // When we drag the map\n    mapper.map.on('dragstart', function(){\n\n       // Stop following a marker\n       followmarker = false;\n       // mapper.map.closePopup(popup);\n    });\n\n    /*\n     * Follow a car buttons action\n     */\n    $(document).delegate('.follow-device', 'click', function(e)\n    {\n        e.preventDefault();\n\n        // Scroll to the map\n        window.scrollTo(0, 100);\n\n        // Start following a marker\n        followmarker = $(this).data('device-id');\n\n        var mapmarker = getMarker(followmarker);\n\n        if(mapmarker)\n        {\n            // popup.setContent(mapmarker.pop);\n            // popup.setLatLng(mapmarker.getLatLng());\n            // mapper.map.openPopup(popup);\n\n            // Center the map to the chosen vehicle\n            mapper.map.panTo(mapmarker.getLatLng());\n        }\n        // followdevice($(this).attr('device-id'), mapmarker);\n    });\n\n    /*\n     * Fit points in map button action\n     */\n    $(document).delegate('#fit-points', 'click', function(e)\n    {\n        e.preventDefault();\n\n        // Stop following a marker\n        followmarker = false;\n\n        // Close the popup\n        // mapper.map.closePopup(popup);\n\n        setTimeout(function()\n        {\n            mapper.map.fitBounds(bounds, {padding: [50, 50]});\n        }, 100);\n\n        if(markers.length < 2)\n        {\n            mapper.map.setZoom(mapper.map.getZoom() - 5);\n        }\n\n    });\n\n    // Refresh data every 8 seconds\n    locationsreloadtimer = setInterval(reloadLocations, locationsrefreshrate);\n    // statisticsreloadtimer = setInterval(reloadStatistics, statisticsrefreshrate);\n\n}); // end document ready\n\nfunction followdevice(deviceId, mapMarker)\n{\n    followmarker = deviceId;\n\n    if(mapmarker)\n    {\n        // mapper.map.openPopup(popup);\n\n        // Center the map to the chosen vehicle\n        mapper.map.panTo(mapmarker.getLatLng());\n    }\n}\n\nfunction reloadLocations(initial)\n{\n    bounds = new L.LatLngBounds();\n    requester.post('dashboard/json/getLastData').then(function (data)\n    {\n        if(data.devicesLastData.length != 0)\n        {\n            // Iterate tracked Objects\n            $.each(data.devicesLastData, function(i, trackedObject)\n            {\n                if(trackedObject.last_gps_event_id && \n                    trackedObject.last_gps_event.latitude != null &&\n                    trackedObject.last_gps_event.longitude != null &&\n                    trackedObject.last_gps_event.latitude != 0 &&\n                    trackedObject.last_gps_event.longitude != 0)\n                {\n                    var location = new L.LatLng(trackedObject.last_gps_event.latitude, trackedObject.last_gps_event.longitude);\n                    var popupcontent = null;//loadPopupInfo(i, trackedObject);\n\n                    bounds.extend(location);\n                    assignMarker(i, trackedObject, location, popupcontent);\n                }\n\n                // Modify tracked objects table row\n                updateTrackedObjectTableRow(trackedObject);\n            });\n        }\n\n        // Store markers in a layerGroup\n        markergroup = L.layerGroup(markers);\n\n        // Add the markers layerGroup to map\n        mapper.map.addLayer(markergroup);\n\n        // Fit bounds on initial load\n        if(initial == 1)\n        {\n            mapper.map.fitBounds(bounds, {padding: [50, 50]});\n        }\n    },\n    function (httperror) {\n\n        if(typeof httperror.status != \"undefined\" && httperror.status == 401) {\n            console.log('failed');\n            // window.location = \"/auth/login?expired=1\";\n        }\n    });\n}\n\nfunction updateTrackedObjectTableRow(trackedObject)\n{\n    var row = trackedObjectsTableApi.row('tr.trackedObject-'+trackedObject.id).node();\n    var actions = '<a href=\"#\" data-device-id=\"'+trackedObject.id+'\" class=\"btn btn-xs btn-info follow-device\"><i class=\"fa fa-map-marker\"></i> ' + translations.view_on_map + '</a> ';\n    var last_communication_cell = 3;\n\n    if ($(trackedObjectsTableApi.rows().nodes()).filter('tr.trackedObject-' + trackedObject.id).length == 1)\n    {\n        if (trackedObject.last_gps_event != null)\n        {\n            // Check for module 'trains'\n            // if (trackedObject.readTrain) {\n            //     actions += ' <button class=\"manage_train btn btn-xs btn-success\" data-id=\"' + trackedObject.tracked_object_id + '\" data-title=\"' + translations.manage_train + '\" data-action=\"' + location.protocol + '//' + location.hostname + '/trains/' + trackedObject.tracked_object_id + '/manage\" data-get><i class=\"fa fa-pencil-square-o\"></i> ' + translations.manage_train + '</button> ';\n\n            //     last_communication_cell = 4;\n\n            //     // Update row's speed\n            //     // trackedObjectsTableApi\n            //     //     .cell(row, 3)\n            //     //     .data(parseFloat(trackedObject.speed).toFixed(0) + ' ' + translations.km_hours);\n\n            //     // Update train name\n            //     // trackedObjectsTableApi\n            //     //     .cell(row, 5)\n            //     //     .data(trackedObject.train_name ? trackedObject.train_name : '-');\n\n            //     // Update train role\n            //     // trackedObjectsTableApi\n            //     //     .cell(row, 6)\n            //     //     .data(trackedObject.train_role ? trackedObject.train_role : '-');\n\n            //     // Update driver\n            //     // trackedObjectsTableApi\n            //     //     .cell(row, 7)\n            //     //     .data(trackedObject.driver ? trackedObject.driver : '-');\n            // } else {\n            //     actions += '<a href=\"https://maps.google.com/?cbll=' + trackedObject.last_gps_event.latitude + ',' + trackedObject.last_gps_event.longitude + '&cbp=12,' + trackedObject.last_gps_event.azimuth + ',0,0,10&layer=c\" class=\"btn btn-xs btn-success streetview-link\" target=\"_blank\"><i class=\"fa fa-eye\"></i> ' + translations.view_on_street_view;\n\n            //     // Update row's status\n            //     // trackedObjectsTableApi\n            //     //     .cell(row, 3)\n            //     //     .data(translations[trackedObject.last_gps_event.device_status]);\n\n            //     // Update row's speed\n            //     // trackedObjectsTableApi\n            //     //     .cell(row, 4)\n            //     //     .data(parseFloat(trackedObject.speed).toFixed(0) + ' ' + translations.km_hours);\n            // }\n\n            // Update row's actions\n            trackedObjectsTableApi\n                .cell(row, 4)\n                .data(actions);\n\n            // Streetview link\n            $('tr.trackedObject-' + trackedObject.id).find('a.streetview-link').attr('href', \"https://maps.google.com/?cbll=\" + trackedObject.last_gps_event.latitude + \",\" + trackedObject.last_gps_event.longitude + \"&cbp=12,\" + trackedObject.last_gps_event.azimuth + \",,0,5&layer=c\");\n        }\n\n        if (trackedObject.last_gps_event != null) {\n            var communication = moment(toDate(trackedObject.last_gps_event.gps_utc_time, 'YYYY-MM-DD HH:mm'));\n            var now = moment();\n            var diff = now.diff(communication, 'minutes');\n            var badge = 'badge-danger';\n\n            if (diff <= 5) {\n                badge = 'badge-primary';\n            } else if (diff > 5 && diff < 60) {\n                badge = 'badge-warning';\n            }\n\n            // Update row's last communication field\n            trackedObjectsTableApi\n                .cell(row, last_communication_cell)\n                .data('<span class=\"badge ' + badge + '\" >' + toDate(trackedObject.last_gps_event.gps_utc_time, 'HH:mm / DD.MM.YYYY') + '</span>');\n        }\n        else\n        {\n            trackedObjectsTableApi\n                .cell(row, last_communication_cell)\n                .data(translations.no_data);\n        }\n    }\n}\n\nfunction assignMarker(i, trackedObject, location, popupcontent)\n{\n    if(trackedObject.last_gps_event.latitude != 0.00 || trackedObject.last_gps_event.longitude != 0.00) {\n\n        var existingMarker = getMarker(trackedObject.id);\n\n        if (existingMarker != false)\n        {\n            updateMarker(existingMarker, trackedObject, popupcontent);\n        }\n        else // Marker does not exist so create it\n        {\n            createMarker(trackedObject, location, popupcontent);\n        }\n    }\n}\n\nfunction updateMarker(existingMarker, trackedObject, popupcontent)\n{\n    // Update position\n    existingMarker.setLatLng([trackedObject.last_gps_event.latitude, trackedObject.last_gps_event.longitude]).update();\n\n    // Update icon\n    assignIcon(existingMarker, trackedObject.last_gps_event.device_status, trackedObject.last_gps_event.azimuth);\n\n    // Update popupcontent\n    // existingMarker.pop = popupcontent;\n\n    // Update opened popup\n    if(followmarker && followmarker == trackedObject.id)\n    {\n        // popup.setLatLng([trackedObject.last_gps_event.latitude, trackedObject.last_gps_event.longitude]);\n        // popup.setContent(popupcontent);\n\n        // mapper.map.openPopup(popup);\n        mapper.map.panTo(existingMarker.getLatLng());\n\n    }\n}\n\nfunction createMarker(trackedObject, location, popupcontent)\n{\n    // Create marker\n    var marker =  new L.Marker(location);\n\n    // Set icon for the new marker\n    assignIcon(marker, trackedObject.last_gps_event.device_status, trackedObject.last_gps_event.azimuth)\n\n    // Set device_id as key for marker\n    marker.key = trackedObject.id;\n\n    // Set popupcontent\n    // marker.pop = popupcontent;\n\n    // Set label for the new marker\n    marker.bindLabel(trackedObject.identification_number);\n\n    // Add marker to markers array\n    markers.push(marker);\n\n    // Set click event for newly created marker\n    marker.on('click', function(e)\n    {\n        // popup.setContent(e.target.pop);\n        // popup.setLatLng(e.latlng);\n        // mapper.map.openPopup(popup);\n        mapmarker = getMarker(trackedObject.id);\n        followdevice(trackedObject.id, mapmarker);\n    });\n\n}\n\nfunction loadPopupInfo(i, trackedObject)\n{\n    var today_date_string = moment().format('YYYY-MM-DD');\n    var todayLastDateWithHour = moment().format('YYYY-MM-DD') + ' 23:59:59';\n    var yesterday_date_string = moment().subtract(1, 'days').format('YYYY-MM-DD');\n    var yesterdayLastDateWithHour = moment().subtract(1, 'days').format('YYYY-MM-DD') + ' 23:59:59';\n\n    var subdetails = \"\";\n\n    if(trackedObject.last_gps_event.start_time != null) {\n        subdetails = \"<td><i class='glyphicon glyphicon-play'></i> \"+translations.took_off_at+\": </td><td colspan='2'>\"+toDate(trackedObject.start_time, 'HH:mm')+\"</td>\";\n    }\n    else\n    {\n        subdetails = \"<td><i class='glyphicon glyphicon-play'></i> \"+translations.took_off_at+\": </td><td colspan='2'>\"+translations.no_data+\"</td>\";\n    }\n\n    if(trackedObject.last_gps_event.end_time != null) {\n        subdetails = \"<td><i class='glyphicon glyphicon-pause'></i> \"+translations.stopped_at+\": </td><td colspan='2'>\"+toDate(trackedObject.end_time, 'HH:mm')+\"</td>\";\n    }\n\n    var enginestatus = \"\";\n\n    if(trackedObject.last_gps_event.device_status == 'ignition_on_motion' || trackedObject.last_gps_event.device_status == 'ignition_on_rest')\n    {\n        enginestatus = translations.engine_on;\n    }\n    else\n    {\n        enginestatus = translations.engine_off;\n    }\n\n    var driverstatus = \"\";\n\n    if(trackedObject.last_gps_event.driver != null)\n    {\n        driverstatus = \"<td><i class='fa fa-truck'></i> \"+translations.driver+\":</td><td colspan='2'><strong>\"+trackedObject.last_gps_event.driver+\"</strong></td>\";\n    } else {\n\n        driverstatus = \"<td><i class='fa fa-truck'></i> \"+translations.driver+\":</td><td colspan='2'><strong> \"+translations.unknown_driver+\" </strong></td>\";\n    }\n\n    var quickactions = translations.general_report +\n                       \"&nbsp;<a class='btn btn-custom btn-xs' href='/reports/general/report?deviceId=\" +\n                       trackedObject.id +\n                       \"&hiddenLastDate=\" +\n                       todayLastDateWithHour +\n                       \"&driver=&lastDate=\" +\n                       today_date_string +\n                       \"&periodInput=1'>\" +\n                       translations.report_today +\n                       \"</a><a class='btn btn-custom btn-xs' href='/reports/general/report?deviceId=\" +\n                       trackedObject.device_id +\n                       \"&hiddenLastDate=\" +\n                       yesterdayLastDateWithHour +\n                       \"&driver=&lastDate=\" +\n                       yesterday_date_string +\n                       \"&periodInput=1'>\" +\n                       translations.report_yesterday +\n                       \"</a><a class='btn btn-custom btn-xs' href='/reports/general/report?deviceId=\" +\n                       trackedObject.device_id +\n                       \"&hiddenLastDate=\" +\n                       todayLastDateWithHour +\n                       \"&driver=&lastDate=\" +\n                       today_date_string +\n                       \"&periodInput=7'>\" +\n                       translations.report_seven_days+\"</a>\";\n\n    return \"<div class='ibox' style='margin:0'><div class='ibox-title-custom'><strong>\"+trackedObject.name+\" (\"+trackedObject.identification_number+\")</strong></div><div class='ibox-content no-padding'><table class='popup-table'><tr><td><i class='fa fa-dashboard'></i> \"+Math.round(trackedObject.speed)+\" \"+translations.km_hours+\"</td><td><i class='fa fa-rss'></i> 24</td><td><i class='fa fa-plug'></i> \"+enginestatus+\"</td></tr><tr>\"+subdetails+\"</tr><tr>\"+driverstatus+\"</tr></table></div><div class='ibox-footer ibox-footer-fix'>\"+quickactions+\"</div></div>\";\n}\n\nfunction getMarker(deviceId)\n{\n    for(var i in markers)\n    {\n        if(markers[i].key == deviceId){\n            return markers[i];\n        }\n    }\n    return false;\n}\n\nfunction  toDate(date, format)\n{\n    console.log(date);\n    // var localTime  = moment(date).toDate();\n    var localTime = moment(date.date).format(format);\n    return localTime;\n}\n\n\nfunction reloadStatistics(initial)\n{\n    var start = $('#hidden_date_day_start').val();\n    var end   = $('#hidden_date_day_end').val();\n    \n    var payload = { start : start, end : end };\n    \n    requester.post('dashboard/json/getDailyToStatistics', null, payload).then(\n    function (data)\n    {\n        if(data.dailyToStatistics.length != 0)\n        {\n            $.each(data.dailyToStatistics, function(n, trackedObject)\n            {\n                if( $(trackedObjectsTableApi.rows().nodes()).filter('tr.trackedObject-' + trackedObject.device_id).length == 1 )\n                {\n                    var row = trackedObjectsTableApi.row('tr.trackedObject-'+trackedObject.device_id).node();\n                    // Check for module 'trains'\n                    if (trackedObject.readTrain) {\n                        var data = '';\n                        $.each(trackedObject, function(param, value) {\n                            if (jQuery.inArray( param, ['readTrain', 'device_id'] ) == -1) {\n                                data += param + ': ' + value + '<br /><br />';\n                            }\n                        });\n                        // Update row's digital inputs\n                        trackedObjectsTableApi\n                            .cell(row, 8)\n                            .data(data);\n                    } else {\n                        // Update row's max speed\n                        trackedObjectsTableApi\n                            .cell(row, 6)\n                            .data(parseFloat(trackedObject.max_speed).toFixed(0) + ' ' + translations.km_hours);\n\n                        // Update row's daily distance\n                        trackedObjectsTableApi\n                            .cell(row, 7)\n                            .data(parseFloat(trackedObject.daily_distance).toFixed(0) + ' ' + translations.km);\n\n                        // Update row's daily distance can\n                        trackedObjectsTableApi\n                            .cell(row, 8)\n                            .data(parseFloat(trackedObject.daily_distance_can).toFixed(0) + ' ' + translations.km);\n                    }\n                }\n            });\n        }\n\n    },\n    function (httperror)\n    {\n        console.log('fail');\n    });\n}\n\nL.RotatedMarker = L.Marker.extend({\n    options: {\n        angle: 0\n    },\n    statics: {\n        // determine the best and only CSS transform rule to use for this browser\n        bestTransform: L.DomUtil.testProp([\n            'transform',\n            'WebkitTransform',\n            'msTransform',\n            'MozTransform',\n            'OTransform'\n        ])\n    },\n    _setPos: function (pos) {\n        L.Marker.prototype._setPos.call(this, pos);\n\n        var rotate = ' rotate(' + this.options.angle + 'deg)';\n        if (L.RotatedMarker.bestTransform) {\n            // use the CSS transform rule if available\n            this._icon.style[L.RotatedMarker.bestTransform] += rotate;\n        } else if(L.Browser.ie) {\n            // fallback for IE6, IE7, IE8\n            var rad = this.options.angle * L.LatLng.DEG_TO_RAD,\n                costheta = Math.cos(rad),\n                sintheta = Math.sin(rad);\n            this._icon.style.filter += ' progid:DXImageTransform.Microsoft.Matrix(sizingMethod=\\'auto expand\\', M11=' +\n                costheta + ', M12=' + (-sintheta) + ', M21=' + sintheta + ', M22=' + costheta + ')';\n        }\n    }\n});\n\nL.rotatedMarker = function (pos, options) {\n    return new L.RotatedMarker(pos, options);\n};\n\n\n"],"sourceRoot":"/source/"}